---
Parameters:
  AssociatePublicIpAddress:
    Type: String
  VolumeType:
    Type: String
  VolumeSize:
    Type: String
  AmazonLinux:
    Type: String
  InstanceType:
    Type: String
  Private1Subnet:
    Type: String
  Private2Subnet:
    Type: String
  Public1Subnet:
    Type: String
  Public2Subnet:
    Type: String
  VpcId:
    Type: String
  DesiredCapacity:
    Type: String
  MaxSize:
    Type: String
  MinSize:
    Type: String
  JenkinsInstancePort:
    Type: String
  LoadBalancerPort:
    Type: String
  JenkinsInstanceProfile:
    Type: String
  ProjectCode:
    Type: String
  Env:
    Type: String
  HostedZoneName:
    Type: String
  TTL:
    Type: Number
  Type:
    Type: String
    AllowedValues: [CNAME]
    Default: CNAME
  JenkinsSG:
    Type: String
  JenkinsELBSG:
    Type: String
  LoadBalancerProtocol:
    Type: String
  JenkinsElasticFileSystem:
    Type: String
  LoadBalancerInsecurePort:
    Type: String
  LoadBalancerInsecureProtocol:
    Type: String
  LoadBalancerType:
    Type: String
    AllowedValues: [application, classic]
    Default: application
  HealthCheckEnabled:
    Type: String
  HealthCheckIntervalSeconds:
    Type: String
  HealthCheckPath:
    Type: String
  HealthCheckPort:
    Type: String
  HealthCheckProtocol:
    Type: String
  HealthCheckTimeoutSeconds:
    Type: String
  HealthyThresholdCount:
    Type: String
  TargetType:
    Type: String
  ServerCertArn:
    Type: String
  ClientRootCertArn:
    Type: String
  ClientVPNCidr:
    Type: String

Conditions:

  # Check to see if we have the Server Certificate ARN
  ServerCertArnPresent: !Not [ !Equals [ !Ref ServerCertArn, "" ] ]

  # Check to see if we have the Client Root Certificate ARN
  ClientRootCertArnPresent: !Not [ !Equals [ !Ref ClientRootCertArn, "" ] ]

  ClientVPNMethod: !And
    - !Condition ServerCertArnPresent
    - !Condition ClientRootCertArnPresent

  # Create the HTTPS cert and target record if we do not have a ServerCertArn
  HTTPSMethod: !Equals [ !Ref ServerCertArn, "" ]

Resources:

  JenkinsLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            a:
              command: "sudo yum update -y"
            b:
              command: "sudo yum install -y java-1.8.0"
            c:
              command: "mkdir -p /var/lib/jenkins"
            d:
              command: "yum install amazon-efs-utils -y"
            e:
              command: !Join
                - ''
                - - 'mount -t efs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport '
                  - !Ref JenkinsElasticFileSystem
                  - ':/ /var/lib/jenkins'
            f:
              command: "wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo"
            g:
              command: "rpm --import http://pkg.jenkins-ci.org/redhat-stable/jenkins-ci.org.key"
            h:
              command: "yum install jenkins -y"
            i:
              command: "service jenkins start"
            j:
              command: "chkconfig jenkins on"
            k:
              command:
                !Join
                  - ''
                  - - 'echo "aws ssm put-parameter --name "jenkins-init-password" --type "SecureString" '
                    - '--value file:///var/lib/jenkins/secrets/initialAdminPassword --key-id alias/aws/ssm --overwrite --region '
                    - !Ref 'AWS::Region'
                    - ' > /root/allout.txt 2>&1" | at now + 2 minutes'
    Properties:
      AssociatePublicIpAddress: !Ref AssociatePublicIpAddress
      ImageId: !Ref AmazonLinux
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref JenkinsSG
      IamInstanceProfile: !Ref JenkinsInstanceProfile
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          yum update aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -s ${AWS::StackName} -r JenkinsLC --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource JenkinsASG --region ${AWS::Region}

  JenkinsASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: JenkinsASG
      DesiredCapacity: !Ref DesiredCapacity
      LaunchConfigurationName: !Ref JenkinsLC
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      VPCZoneIdentifier:
        - !Ref Private1Subnet
        - !Ref Private2Subnet
      TargetGroupARNs:
        - !Ref JenkinsTargetGroup
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
      ResourceSignal:
        Count: !Ref DesiredCapacity

  JenkinsELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join
        - ''
        - - !Ref ProjectCode
          - '-'
          - !Ref Env
          - '-alb2'
      Scheme: !If [ HTTPSMethod, "internet-facing", "internal" ]
      Type: !Ref LoadBalancerType
      SecurityGroups:
        - !Ref JenkinsELBSG
      Subnets:
        - !If [ HTTPSMethod, !Ref Public1Subnet, !Ref Private1Subnet ]
        - !If [ HTTPSMethod, !Ref Public2Subnet, !Ref Private2Subnet ]

  JenkinsELBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !If [HTTPSMethod, !Ref JenkinsCertificate, !Ref "AWS::NoValue"]
      LoadBalancerArn: !Ref JenkinsELB
      Port: !If [HTTPSMethod, !Ref LoadBalancerPort, !Ref LoadBalancerInsecurePort]
      Protocol: !If [HTTPSMethod, !Ref LoadBalancerProtocol, !Ref LoadBalancerInsecureProtocol]
      DefaultActions:
        - TargetGroupArn: !Ref JenkinsTargetGroup
          Type: "forward"

  # For direction
  JenkinsELBHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HTTPSMethod
    Properties:
      LoadBalancerArn: !Ref JenkinsELB
      Port: !Ref LoadBalancerInsecurePort
      Protocol: !Ref LoadBalancerInsecureProtocol
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: !Ref LoadBalancerPort
            Protocol: !Ref LoadBalancerProtocol
            Query: "#{query}"
            StatusCode: "HTTP_301"

  JenkinsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: !Ref HealthCheckEnabled
      HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSeconds
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckPort: !Ref HealthCheckPort
      HealthCheckProtocol: !Ref HealthCheckProtocol
      HealthCheckTimeoutSeconds: !Ref HealthCheckTimeoutSeconds
      HealthyThresholdCount: !Ref HealthyThresholdCount
      Name: !Join
        - ''
        - - !Ref ProjectCode
          - '-'
          - !Ref Env
          - '-target-group'
      Port: !Ref JenkinsInstancePort
      Protocol: !Ref HealthCheckProtocol
      TargetType: !Ref TargetType
      VpcId: !Ref VpcId

  MyHostedZone:
    Type: AWS::Route53::HostedZone
    Condition: HTTPSMethod
    Properties:
      HostedZoneConfig:
        Comment: "My own hosted zone"
      Name: !Ref HostedZoneName

  JenkinsRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: HTTPSMethod
    Properties:
      HostedZoneId: !Ref MyHostedZone
      ResourceRecords:
        - !GetAtt JenkinsELB.DNSName
      Name: !Join
        - ''
        - - !Ref ProjectCode
          - '.'
          - !Ref HostedZoneName
      TTL: !Ref TTL
      Type: !Ref Type

  JenkinsCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: HTTPSMethod
    Properties:
      DomainName: !Join
        - ''
        - - !Ref ProjectCode
          - '.'
          - !Ref HostedZoneName
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref ProjectCode
              - '-'
              - !Ref Env
              - '-'
              - 'jenkins-certificate'

  # ClientVPN
  ClientVPNEndpoint:
    Type: AWS::EC2::ClientVpnEndpoint
    Condition: ClientVPNMethod
    Properties:
      AuthenticationOptions:
        - Type: "certificate-authentication"
          MutualAuthentication:
            ClientRootCertificateChainArn: !Ref ClientRootCertArn
      ClientCidrBlock: !Ref ClientVPNCidr
      ConnectionLogOptions:
        Enabled: false
      Description: "Client VPN for Jenkin's access"
      ServerCertificateArn: !Ref ServerCertArn
      TagSpecifications:
        - ResourceType: "client-vpn-endpoint"
          Tags:
          - Key: Name
            Value: !Join
              - ''
              - - !Ref ProjectCode
                - '-'
                - !Ref Env
                - '-'
                - 'client-vpn'

  ClientVPNTargetPrivSubnet1:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    Condition: ClientVPNMethod
    Properties:
      ClientVpnEndpointId: !Ref ClientVPNEndpoint
      SubnetId: !Ref Public1Subnet

  ClientVPNTargetPrivSubnet2:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    Condition: ClientVPNMethod
    Properties:
      ClientVpnEndpointId: !Ref ClientVPNEndpoint
      SubnetId: !Ref Public2Subnet

  # Finally, authorize clients:
  ClientVPNAuthorization:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Condition: ClientVPNMethod
    Properties:
      AuthorizeAllGroups: true
      ClientVpnEndpointId: !Ref ClientVPNEndpoint
      Description: "Allow client VPN user to access VPC resources"
      TargetNetworkCidr: "10.0.0.0/16"
